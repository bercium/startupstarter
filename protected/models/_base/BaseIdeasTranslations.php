<?php

/**
 * This is the model base class for the table "ideas_translations".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "IdeasTranslations".
 *
 * Columns in table "ideas_translations" available as properties of the model,
 * followed by relations of table "ideas_translations" available as properties of the model.
 *
 * @property string $ID
 * @property integer $language_id
 * @property string $idea_id
 * @property string $title
 * @property string $pitch
 * @property string $description
 * @property integer $description_public
 * @property string $tweetpitch
 * @property integer $deleted
 *
 * @property Languages $language
 * @property Ideas $idea
 */
abstract class BaseIdeasTranslations extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'ideas_translations';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'IdeasTranslations|IdeasTranslations', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('language_id, idea_id, title, pitch, description, description_public, tweetpitch, deleted', 'required'),
			array('language_id, description_public, deleted', 'numerical', 'integerOnly'=>true),
			array('idea_id', 'length', 'max'=>8),
			array('title', 'length', 'max'=>64),
			array('tweetpitch', 'length', 'max'=>140),
			array('ID, language_id, idea_id, title, pitch, description, description_public, tweetpitch, deleted', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'language' => array(self::BELONGS_TO, 'Languages', 'language_id'),
			'idea' => array(self::BELONGS_TO, 'Ideas', 'idea_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'ID' => Yii::t('app', 'ID'),
			'language_id' => null,
			'idea_id' => null,
			'title' => Yii::t('app', 'Title'),
			'pitch' => Yii::t('app', 'Pitch'),
			'description' => Yii::t('app', 'Description'),
			'description_public' => Yii::t('app', 'Description Public'),
			'tweetpitch' => Yii::t('app', 'Tweetpitch'),
			'deleted' => Yii::t('app', 'Deleted'),
			'language' => null,
			'idea' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('ID', $this->ID, true);
		$criteria->compare('language_id', $this->language_id);
		$criteria->compare('idea_id', $this->idea_id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('pitch', $this->pitch, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('description_public', $this->description_public);
		$criteria->compare('tweetpitch', $this->tweetpitch, true);
		$criteria->compare('deleted', $this->deleted);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}