<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property string $id
 * @property string $password
 * @property string $email
 * @property string $activkey
 * @property string $create_at
 * @property string $lastvisit_at
 * @property integer $superuser
 * @property integer $status
 * @property string $name
 * @property string $surname
 * @property string $address
 * @property string $avatar_link
 * @property integer $language_id
 * @property integer $newsletter
 * @property integer $invitations
 *
 * @property ClickIdea[] $clickIdeas
 * @property ClickUser[] $clickUsers
 * @property ClickUser[] $clickUsers1
 * @property UserLink[] $userLinks
 * @property UserShare[] $userShares
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

  
	public static function representingColumn() {
		return 'email';
		//return array('email','email');
	}

	public function rules() {
		return array(
			array('email, password, create_at, name', 'required'),
			array('superuser, status, language_id, newsletter, invitations', 'numerical', 'integerOnly'=>true),
			array('email, password, activkey, name, surname, address, avatar_link', 'length', 'max'=>128),
			array('lastvisit_at', 'safe'),
			array('activkey, lastvisit_at, superuser, status, surname, address, avatar_link, language_id, newsletter', 'default', 'setOnEmpty' => true, 'value' => null),
      array('invitations', 'default', 'setOnEmpty' => true, 'value' => '0'),
			array('id, password, email, activkey, create_at, lastvisit_at, superuser, status, name, surname, address, avatar_link, language_id, newsletter, invitations', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'clickIdeas' => array(self::HAS_MANY, 'ClickIdea', 'user_id'),
			'clickUsers' => array(self::HAS_MANY, 'ClickUser', 'user_click_id'),
			'clickUsers1' => array(self::HAS_MANY, 'ClickUser', 'user_id'),
			'userLinks' => array(self::HAS_MANY, 'UserLink', 'user_id'),
			'userMatches' => array(self::HAS_MANY, 'UserMatch', 'match_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'email' => Yii::t('app', 'Email'),
			'password' => Yii::t('app', 'Password'),
			'activkey' => Yii::t('app', 'Activkey'),
			'create_at' => Yii::t('app', 'Create At'),
			'lastvisit_at' => Yii::t('app', 'Lastvisit At'),
			'superuser' => Yii::t('app', 'Superuser'),
			'status' => Yii::t('app', 'Status'),
			'name' => Yii::t('app', 'Name'),
			'surname' => Yii::t('app', 'Surname'),
			'address' => Yii::t('app', 'Address'),
			'avatar_link' => Yii::t('app', 'Avatar Link'),
			'language_id' => Yii::t('app', 'Language'),
			'newsletter' => Yii::t('app', 'Newsletter'),
			'clickIdeas' => null,
			'clickUsers' => null,
			'clickUsers1' => null,
			'userLinks' => null,
			'userMatches' => null,
      'invitations' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('activkey', $this->activkey, true);
		$criteria->compare('create_at', $this->create_at, true);
		$criteria->compare('lastvisit_at', $this->lastvisit_at, true);
		$criteria->compare('superuser', $this->superuser);
		$criteria->compare('status', $this->status);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('surname', $this->surname, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('avatar_link', $this->avatar_link, true);
		$criteria->compare('language_id', $this->language_id);
		$criteria->compare('newsletter', $this->newsletter);
		$criteria->compare('invitations', $this->invitations);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}