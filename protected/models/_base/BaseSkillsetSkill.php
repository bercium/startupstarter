<?php

/**
 * This is the model base class for the table "skillset_skill".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SkillsetSkill".
 *
 * Columns in table "skillset_skill" available as properties of the model,
 * followed by relations of table "skillset_skill" available as properties of the model.
 *
 * @property integer $id
 * @property integer $skillset_id
 * @property integer $skill_id
 * @property string $usage_count
 *
 * @property Skillset $skillset
 * @property Skill $skill
 */
abstract class BaseSkillsetSkill extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'skillset_skill';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Skill group|Skill groups', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('skillset_id, skill_id', 'required'),
			array('skillset_id, skill_id', 'numerical', 'integerOnly'=>true),
			array('usage_count', 'length', 'max'=>11),
			array('usage_count', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, skillset_id, skill_id, usage_count', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'skillset' => array(self::BELONGS_TO, 'Skillset', 'skillset_id'),
			'skill' => array(self::BELONGS_TO, 'Skill', 'skill_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'skillset_id' => null,
			'skill_id' => null,
			'usage_count' => Yii::t('app', 'Usage count'),
			'skillset' => null,
			'skill' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('skillset_id', $this->skillset_id);
		$criteria->compare('skill_id', $this->skill_id);
		$criteria->compare('usage_count', $this->usage_count, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}